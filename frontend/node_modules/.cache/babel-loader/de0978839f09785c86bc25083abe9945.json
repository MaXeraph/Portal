{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\KaRjn\\\\Desktop\\\\CSC309\\\\team51\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * https://usehooks.com/useDebounce/\r\n */\nimport { useState, useEffect } from \"react\";\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const _useState = useState(value),\n        _useState2 = _slicedToArray(_useState, 2),\n        debouncedValue = _useState2[0],\n        setDebouncedValue = _useState2[1];\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport default useDebounce;","map":{"version":3,"sources":["C:/Users/KaRjn/Desktop/CSC309/team51/frontend/src/utils/useDebounce.js"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";;AAAA;;;AAIA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACjC;AADiC,oBAEWJ,QAAQ,CAACG,KAAD,CAFnB;AAAA;AAAA,QAE1BE,cAF0B;AAAA,QAEVC,iBAFU;;AAIjCL,EAAAA,SAAS,CACP,MAAM;AACJ;AACA,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFI,CAMJ;AACA;AACA;;AACA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAbM,EAcP,CAACJ,KAAD,EAAQC,KAAR,CAdO,CAcQ;AAdR,GAAT;AAiBA,SAAOC,cAAP;AACD;;AAED,eAAeH,WAAf","sourcesContent":["/**\r\n * https://usehooks.com/useDebounce/\r\n */\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction useDebounce(value, delay) {\r\n  // State and setters for debounced value\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Update debounced value after delay\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      // Cancel the timeout if value changes (also on delay change or unmount)\r\n      // This is how we prevent debounced value from updating if value is changed ...\r\n      // .. within the delay period. Timeout gets cleared and restarted.\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    [value, delay] // Only re-call effect if value or delay changes\r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;\r\n"]},"metadata":{},"sourceType":"module"}