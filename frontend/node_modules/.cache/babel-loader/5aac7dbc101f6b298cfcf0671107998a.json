{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\KaRjn\\\\Desktop\\\\CSC309\\\\team51\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\KaRjn\\\\Desktop\\\\CSC309\\\\team51\\\\frontend\\\\src\\\\context\\\\UsersContext.jsx\";\nimport React, { createContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nexport const Context = createContext({});\nexport const Provider = props => {\n  // Initial values are obtained from the props\n  const initialUsers = props.users,\n        initialSelectedUsers = props.selectedUser,\n        children = props.children; // Use State to keep the values\n\n  let _useState = useState(initialUsers),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  const _useState3 = useState(initialSelectedUsers),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedUser = _useState4[0],\n        setSelectedUser = _useState4[1];\n\n  const removeStudent = id => {\n    setUsers(users.filter(u => {\n      return u.userInfo.id !== id;\n    }));\n  }; // Make the context object:\n\n\n  const usersContext = {\n    users,\n    setUsers,\n    selectedUser,\n    setSelectedUser,\n    removeStudent\n  }; // pass the value in provider and return\n\n  return React.createElement(Context.Provider, {\n    value: usersContext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, children);\n};\nconst Consumer = Context.Consumer;\nexport { Consumer };\nexport { Context as UsersContext, Provider as UsersContextProvider, Consumer as UsersContextConsumer };\nProvider.propTypes = {\n  users: PropTypes.array,\n  selectedUser: PropTypes.object\n};\nProvider.defaultProps = {\n  users: [],\n  selectedUser: {}\n};","map":{"version":3,"sources":["C:/Users/KaRjn/Desktop/CSC309/team51/frontend/src/context/UsersContext.jsx"],"names":["React","createContext","useState","PropTypes","Context","Provider","props","initialUsers","users","initialSelectedUsers","selectedUser","children","setUsers","setSelectedUser","removeStudent","id","filter","u","userInfo","usersContext","Consumer","UsersContext","UsersContextProvider","UsersContextConsumer","propTypes","array","object","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,OAAO,GAAGH,aAAa,CAAC,EAAD,CAA7B;AAEP,OAAO,MAAMI,QAAQ,GAAGC,KAAK,IAAI;AAC/B;AAD+B,QAGtBC,YAHsB,GAM3BD,KAN2B,CAG7BE,KAH6B;AAAA,QAIfC,oBAJe,GAM3BH,KAN2B,CAI7BI,YAJ6B;AAAA,QAK7BC,QAL6B,GAM3BL,KAN2B,CAK7BK,QAL6B,EAQ/B;;AAR+B,kBASPT,QAAQ,CAACK,YAAD,CATD;AAAA;AAAA,MAS1BC,KAT0B;AAAA,MASnBI,QATmB;;AAAA,qBAUSV,QAAQ,CAACO,oBAAD,CAVjB;AAAA;AAAA,QAUxBC,YAVwB;AAAA,QAUVG,eAVU;;AAY/B,QAAMC,aAAa,GAAGC,EAAE,IAAI;AAC1BH,IAAAA,QAAQ,CACNJ,KAAK,CAACQ,MAAN,CAAaC,CAAC,IAAI;AAChB,aAAOA,CAAC,CAACC,QAAF,CAAWH,EAAX,KAAkBA,EAAzB;AACD,KAFD,CADM,CAAR;AAKD,GAND,CAZ+B,CAoB/B;;;AACA,QAAMI,YAAY,GAAG;AACnBX,IAAAA,KADmB;AAEnBI,IAAAA,QAFmB;AAGnBF,IAAAA,YAHmB;AAInBG,IAAAA,eAJmB;AAKnBC,IAAAA;AALmB,GAArB,CArB+B,CA6B/B;;AACA,SAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEK,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCR,QAAxC,CAAP;AACD,CA/BM;MAiCQS,Q,GAAahB,O,CAAbgB,Q;;AAEf,SACEhB,OAAO,IAAIiB,YADb,EAEEhB,QAAQ,IAAIiB,oBAFd,EAGEF,QAAQ,IAAIG,oBAHd;AAMAlB,QAAQ,CAACmB,SAAT,GAAqB;AACnBhB,EAAAA,KAAK,EAAEL,SAAS,CAACsB,KADE;AAEnBf,EAAAA,YAAY,EAAEP,SAAS,CAACuB;AAFL,CAArB;AAKArB,QAAQ,CAACsB,YAAT,GAAwB;AACtBnB,EAAAA,KAAK,EAAE,EADe;AAEtBE,EAAAA,YAAY,EAAE;AAFQ,CAAxB","sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Context = createContext({});\r\n\r\nexport const Provider = props => {\r\n  // Initial values are obtained from the props\r\n  const {\r\n    users: initialUsers,\r\n    selectedUser: initialSelectedUsers,\r\n    children\r\n  } = props;\r\n\r\n  // Use State to keep the values\r\n  let [users, setUsers] = useState(initialUsers);\r\n  const [selectedUser, setSelectedUser] = useState(initialSelectedUsers);\r\n\r\n  const removeStudent = id => {\r\n    setUsers(\r\n      users.filter(u => {\r\n        return u.userInfo.id !== id;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Make the context object:\r\n  const usersContext = {\r\n    users,\r\n    setUsers,\r\n    selectedUser,\r\n    setSelectedUser,\r\n    removeStudent\r\n  };\r\n\r\n  // pass the value in provider and return\r\n  return <Context.Provider value={usersContext}>{children}</Context.Provider>;\r\n};\r\n\r\nexport const { Consumer } = Context;\r\n\r\nexport {\r\n  Context as UsersContext,\r\n  Provider as UsersContextProvider,\r\n  Consumer as UsersContextConsumer\r\n};\r\n\r\nProvider.propTypes = {\r\n  users: PropTypes.array,\r\n  selectedUser: PropTypes.object\r\n};\r\n\r\nProvider.defaultProps = {\r\n  users: [],\r\n  selectedUser: {}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}